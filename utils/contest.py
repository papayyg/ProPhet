import asyncio
from random import choice

import aioschedule
from aiogram import Dispatcher

from data.config import log_channel
from utils.db.aiomysql import BotDB

contest_word = [['–°–∏—Å—Ç–µ–º–∞ –≤–∑–ª–æ–º–∞–Ω–∞. –ù–∞–Ω–µ—Å—ë–Ω —É—Ä–æ–Ω. –ó–∞–ø—É—â–µ–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–º–µ—Ä.', '–ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–æ–∏—Å–∫ <b>–ø–∏–¥–æ—Ä–∞ –¥–Ω—è...</b>', '–ß—Ç–æ —Ç—É—Ç —É –Ω–∞—Å?', '–û—Ñ—Ñ, –Ω–µ –¥–∞–¥–∏—Ç–µ –ø–æ—Å–ø–∞—Ç—å...', "Woop-woop! That's the sound of da pidor-police!", '–û–ø—è—Ç—å –∏—Å–∫–∞—Ç—å —ç—Ç–æ–≥–æ –ø–∏–¥–æ—Ä–∞...', '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! <b>–ü–∏–¥–æ—Ä –¥–Ω—è</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', '–°–µ–π—á–∞—Å –ø–æ–∫–æ–ª–¥—É–µ–º...', '–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫?', '–í—ã–µ–∑–∂–∞—é –Ω–∞ –ø–æ–∏—Å–∫–∏ <b>–ø–∏–¥–æ—Ä–∞</b>', '–ò—Ç–∞–∫... –∫—Ç–æ –∂–µ —Å–µ–≥–æ–¥–Ω—è <b>–ø–∏–¥–æ—Ä –¥–Ω—è</b>?', '–ü–æ—Ä–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∫–µ—Ç—ã –Ω–∞ –î–æ–Ω–±–∞—Å—Å', '–í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ, –±–µ–≥–∏ –ø–∏–¥–æ—Ä, –±–µ–≥–∏!', '–Ø –ø–æ—á—É—è–ª –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ <b>–ø–∏–¥–æ—Ä–∞</b>'],
              ['–ù—É –¥–∞–≤–∞–π, –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫—Ç–æ —Ç—É—Ç –∫–ª–∞—Å—Å–Ω—ã–π...' ,'<i>–í–µ–¥—ë—Ç—Å—è –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</i>', '<i>–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ...</i>', '<i>–ì–¥–µ-–∂–µ –æ–Ω...</i>', '<i>(–í–æ—Ä—á–∏—Ç) –ê –º–æ–≥–ª–∏ –±—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ –¥–µ–ª–æ–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è</i>', '<i>–•–º...</i>', '<i>–ú–∞—à–∏–Ω—ã –≤—ã–µ—Ö–∞–ª–∏</i>', '<i>–°–∫–∞–Ω–∏—Ä—É—é...</i>', '<i>–°–æ–Ω–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –±—É–º–∞–≥–∏</i>', '<i>–í–æ–µ–Ω–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω, –∫–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ –≤–Ω—É—Ç—Ä–∏...</i>', '<i>–í—ã–µ–∑–∂–∞—é –Ω–∞ –º–µ—Å—Ç–æ...</i>', '–ö–∞–∫ –∂–µ –æ—Ç –Ω–µ–≥–æ –≥–æ–≤–Ω–æ–º –Ω–µ—Å—ë—Ç...', '–¢—ã –¥—É–º–∞–µ—à—å —Å–ø—Ä—è—á–µ—à—å—Å—è?'],
              ['–ß—Ç–æ —Å –Ω–∞–º–∏ —Å—Ç–∞–ª–æ...', '–î–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω. –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.', '–ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å!', '–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ...', '–¢–∞–∫-—Ç–∞–∫, —á—Ç–æ –∂–µ —Ç—É—Ç —É –Ω–∞—Å...', '–¢—ã—Å—è—á–∞ —á–µ—Ä—Ç–µ–π!', '–¢–∞–∫-—Ç–∞–∫, —á—Ç–æ –∂–µ —Ç—É—Ç —É –Ω–∞—Å...', '–û–≥–æ-–≥–æ...', '–í–µ–¥—ë—Ç—Å—è –∑–∞—Ö–≤–∞—Ç –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ...', '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–º—É —é–Ω–∏—Ç—É.', '–í —ç—Ç–æ–º —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ—Ç —Å–º—ã—Å–ª–∞...', '–û—Ö...', '–í —Ä–æ—Ç –º–Ω–µ —Å–ª–æ–Ω–∞...', '–ù–µ –≤–µ—Ä—é —Å–≤–æ–∏–º –≥–ª–∞–∑–∞–º...', '–í—Å–µ–ª–µ–Ω–Ω–∞—è —á—Ç–æ-—Ç–æ –∑–Ω–∞–µ—Ç...'],
              ['–û–≥–æ, –≤—ã –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ! –ê <b>–ø–∏–¥–æ—Ä –¥–Ω—è</b> —Ç–æ - ', '–ß—Ç–æ? –ì–¥–µ? –ö–æ–≥–¥–∞? –ê —Ç—ã <b>–ø–∏–¥–æ—Ä –¥–Ω—è</b> - ', '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –¢—ã <b>–ø–∏–¥–æ—Ä</b>, ', '–ù—è—à–Ω—ã–π <b>–ø–∏–¥–æ—Ä –¥–Ω—è</b> - ', '–ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, –Ω–æ <b>–ø–∏–¥–æ—Ä –¥–Ω—è</b> - ', '–ö–∞–∂–µ—Ç—Å—è, <b>–ø–∏–¥–æ—Ä –¥–Ω—è</b> - ', '<b>–ü–∏–¥–æ—Ä –¥–Ω—è</b> –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π, 1—à—Ç. - ', '–ò –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è... –∞ –Ω–µ—Ç, –æ—à–∏–±–∫–∞, –≤—Å–µ–≥–æ-–ª–∏—à—å <b>–ø–∏–¥–æ—Ä</b> - ', '–ù—É —Ç—ã –∏ <b>–ø–∏–¥–æ—Ä</b>, ', '–ê–≥–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –°–µ–≥–æ–¥–Ω—è —Ç—ã <b>–ø–∏–¥–æ—Ä</b> - ', '''.‚àßÔºø‚àß 
( ÔΩ•œâÔΩ•ÔΩ°)„Å§‚îÅ‚òÜ„Éª*„ÄÇ 
‚äÇ  „Éé    „Éª„Çú+. 
„Åó„ÉºÔº™   ¬∞„ÄÇ+ *¬¥¬®) 
         .¬∑ ¬¥¬∏.¬∑*¬¥¬®) 
          (¬∏.¬∑¬¥ (¬∏.¬∑'* ‚òÜ –í–ñ–£–• –ò –¢–´ –ü–ò–î–û–†, ''', '–î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –Ω—É–∂–µ–Ω, <b>–ø–∏–¥–æ—Ä</b> –æ–±–Ω–∞—Ä—É–∂–µ–Ω - ']]


async def contest_schedule(dp: Dispatcher):
    chats = await BotDB.pick_pidor()
    output = '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–∞:\n'
    for chat in chats:
        user = choice(await BotDB.users_pidor(chat[0]))
        await BotDB.user_rep(chat[0], user[1], user[0])
        pidor = f'<a href="tg://user?id={user[1]}">{user[0]}</a>'
        output += f'{pidor} –≤ —á–∞—Ç–µ {chat[0]}\n'
        messages = [choice(contest_word[0]), choice(contest_word[1]), choice(contest_word[2]), f'{choice(contest_word[3])}{pidor}']
        for message in messages:
            try:
                await dp.bot.send_message(chat[0], message)
            except:
                continue
            await asyncio.sleep(3)
    await dp.bot.send_message(log_channel, f'üéâ {output}')

async def scheduler(dp):
    aioschedule.every().day.at("22:00").do(lambda: asyncio.create_task(contest_schedule(dp)))
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup_contest(dp):
    asyncio.create_task(scheduler(dp))